1. Code for Odd/Even

import java.util.*;

class Test {
    public static void main(String[] args) {

        // variable declare
        int i, n;

        Scanner valueinput = new Scanner(System.in);
        System.out.println("Enter how many number you want to check for odd/even\n");
        n = valueinput.nextInt();

        for(i=1; i<=n; i++) {
            if (i%2 == 0) {
                System.out.printf("%d is an even number\n", i);
            }
            else {
                System.out.printf("%d is an odd number\n", i);
            }

        }
    }
}

2. Check prime number

import java.util.*;

class Test {
    public static void main(String[] args) {

        // variable declare
        int i, n, flag = 0;

        Scanner valueinput = new Scanner(System.in);
        System.out.println("Enter a number to check prime or not?\n");
        n = valueinput.nextInt();

        for (i = 2; i < n; i++) {
            if (n % i == 0) {
                flag++;
                break;
            }
        }

        if (flag == 0) {
            System.out.printf("%d is a prime number", n);
        } else {
            System.out.printf("%d is not a prime number", n);
        }
    }
}

3. Check n to m range number prime or not.

import java.util.*;

class Test {
    public static void main(String[] args) {

        // variable declare
        int i, number, count = 0;

        Scanner valueinput = new Scanner(System.in);
        System.out.printf("Enter how many number you want to check prime or not: ");
        number = valueinput.nextInt();

        for (i = 3; i <= number; i++) {
            for (int j=2; j<i; j++) {
                if(i%j == 0) {
                    count++;
                    break;
                }
            }

            if ( count == 0) {
                    System.out.printf("%d is a prime number.\n", i);
                }
            count = 0;
        }

    }
}

4. Factorial number

import java.util.*;

class Test {
    public static void main(String[] args) {

        // variable declare
        int i, number, count = 0,  sum = 1;

        Scanner valueinput = new Scanner(System.in);
        System.out.printf("Enter your factorial number: ");
        number = valueinput.nextInt();

        for (i = 1; i <= number; i++) {
            
            sum = sum * i;
        }

        System.out.printf("factorial value is: %d", sum);

    }
}

5. Fibonacci Serious

import java.util.*;

class Test {
    public static void main(String[] args) {

        // variable declare
        int fib1 = 0 , fib2 = 1, fib3, number, sum = 0;

        Scanner valueinput = new Scanner(System.in);
        System.out.printf("Enter the fibonacci number range: ");
        number = valueinput.nextInt();

        System.out.printf("Fibonacci is: %d %d", fib1, fib2);

        for (int i = 3; i <= number; i++) { //here i=3 coz already two are frinted.
             
            fib3 = fib1 + fib2;
            System.out.printf(" %d", fib3);
            fib1 = fib2;
            fib2 = fib3;
        }


    }
}

6. Reverse String

import java.util.*;

class Test {
    public static void main(String[] args) {

        // variable declare
        int i;
        String reverse = "";

        Scanner valueinput = new Scanner(System.in);
        System.out.printf("Enter a string to reverse: ");
        String str = valueinput.nextLine();

        for(i = str.length() - 1; i>=0; i--) {
            reverse += str.charAt(i);
        }
        
        System.out.printf("reverse string is: %s", reverse);
    }
}

7. Palindrom check

import java.util.*;

class Test {
    public static void main(String[] args) {

        // variable declare
        int i;
        String reverse = "";

        Scanner valueinput = new Scanner(System.in);
        System.out.printf("Enter a string to check palindrom or not?: ");
        String str = valueinput.nextLine();

        for(i = str.length() - 1; i>=0; i--) {
            reverse += str.charAt(i);
        }
        
        if (str.equals(reverse)) {
            System.out.printf("palindrom!");
        } else {
            System.out.println("not palindrom");

        }
    }
}

8. Sum of digits

import java.util.*;

class Test {
    public static void main(String[] args) {

        // variable declare
        int i, number,  sum = 0;
        String reverse = "";

        Scanner valueinput = new Scanner(System.in);
        System.out.printf("Enter a number to sum of digits: ");
        String str = valueinput.nextLine();

        String arrayValue[] = str.split("");

        for(String a : arrayValue) {
            number = Integer.parseInt(a);
            sum += number;
        }
        System.out.printf("Sum of digits is: %d", sum);
    }
}

9. Another way to calculate of sum digits

import java.util.*;

class Test {
    public static void main(String[] args) {

        // variable declare
        int remainder, temp, number,  sum = 0;

        Scanner valueinput = new Scanner(System.in);
        System.out.printf("Enter a number to sum of digits: ");
        int value = valueinput.nextInt();

        temp = value;

        while(temp != 0) {
            remainder = temp % 10;
            sum += remainder;
            temp = temp / 10;
        }
        
        System.out.printf("The sum of digit is: %d", sum);
    }
}

10. Pattern show   1
		   1	2
		   1	2	3   as like as this	 	

import java.util.*;

class Test {
    public static void main(String[] args) {

        // variable declare
        int i, j, n;

        Scanner valueinput = new Scanner(System.in);
        System.out.printf("Enter how many row of pattern you want to show: ");
        n = valueinput.nextInt();

        for (i = 0; i<=n; i++) {
            for (j = 0; j<=i; j++) {
                System.out.printf("%d ", j);
            }

            System.out.println("\n");
        }
    }
}

11. Show Max Min value

import java.util.*;

class Test {
    public static void main(String[] args) {

        // variable declare
        int i, max, min, n = 0;
        int[] arrayValue = new int[5];

        Scanner valueinput = new Scanner(System.in);
        System.out.printf("Enter 5 value to show maximum and minimum: \n");

        for (i = 0; i<5; i++) {
            arrayValue[i] = valueinput.nextInt();
        }

        max = arrayValue[0];
        min = arrayValue[0];

        for (int j = 1; j < 5; j++) {
            
                if (max < arrayValue[j]) {
                    max = arrayValue[j];
                }

                if (min > arrayValue[j]) {
                    min = arrayValue[j];
                }
        }

        System.out.println("Maximum = " +max);
        System.out.println("Minimum = " +min);

        
    }
}

12. Add to number without using arithomatic operator

import java.util.*;

class Test {

    static int Add(int x, int y) {
        while(y != 0) {
            int carry = x & y;

            x = x ^ y;

            y = carry << 1;
        }
        return x;
    }
    public static void main(String[] args) {

        // variable declare
        int x, y;
        System.out.println(Add(67, 32));
        
    }
}

13. Sum of Matrix A and Matrix B

import java.util.*;

class Test {

    public static void main(String[] args) {

        // variable declare
        int[][] firstAry = new int[2][3];        
        int[][] secondAry = new int[2][3];


        
        Scanner valueInput = new Scanner(System.in);
        
        // Scanner for first array value
        System.out.println("Enter first array value: ");
        for (int i = 0; i < 2; i++) {
            for (int j = 0; j < 3; j++) {
                firstAry[i][j] = valueInput.nextInt();
            }
        }

        // Scanner for second array value  
        System.out.println("Enter second array value: ");
        for (int i = 0; i < 2; i++) {
            for (int j = 0; j < 3; j++) {
                secondAry[i][j] = valueInput.nextInt();
            }
        }

        // first array value show
        System.out.println("First array value is: ");
        for (int i = 0; i < 2; i++) {
            for (int j = 0; j < 3; j++) {
                System.out.printf("%d ", firstAry[i][j]);
            }
            System.out.println();
        }

         // Second array value show
        System.out.println("Second array value is: ");
        for (int i = 0; i < 2; i++) {
            for (int j = 0; j < 3; j++) {
                System.out.printf("%d ", secondAry[i][j]);
            }
            System.out.println();
        }


         // Add both array value
        System.out.println("Sum of Matrix1 and Matrix2 value is: ");
        for (int i = 0; i < 2; i++) {
            for (int j = 0; j < 3; j++) {
                System.out.printf("%d ", firstAry[i][j] + secondAry[i][j]);
            }
            System.out.println();
        }


        
    }
}

14. 0
    1 2
    3 4 5
    6 7 8 9  show this pattern.

import java.util.*;

class Test {

    public static void main(String[] args) {

        // variable declare
        int k = 0;
        int[][] firstAry = new int[4][4];
        
        for (int i = 0; i < 4; i++) {
            for (int j = 0; j <= i; j++) {
                firstAry[i][j] = k;
                k++;
            }
        }

        for (int i = 0; i < 4; i++) {
            for (int j = 0; j <= i; j++) {
                System.out.printf("%d ", firstAry[i][j]);
            }
            System.out.println();
        }
        
    }
}

15. Arrylist Declare, add(), size(), for loop with special one, Intration use system, hasNext(), next(), remove(), removeAll() function test
*sourse: Java Bangla Tutorials 63 - anisul islam

import java.util.ArrayList;
import java.util.Iterator;

class Test {

    public static void main(String[] args) {

        // arraylist declare
        ArrayList<Integer> number = new ArrayList<>();

        //add value in arraylist
        number.add(10);
        number.add(30);
        System.out.println(number);  //output [10,30]

        //show length/size of arraylist
        System.out.println(number.size());  //output 2

        //show value using for loop
        for(int a : number) {
            System.out.println(a);  //output 10  30
        }

        //show value using iterator method
        Iterator value = number.iterator();

        while(value.hasNext()) {
            System.out.println(value.next());  //output 10 30
        }

        //remove value from arraylist
        number.remove(1);
        System.out.println(number);  //output [10]

        //removeall value from arraylist
        number.removeAll(number);
        System.out.println(number);  //output []
        
    }
}

16. isEmpty(), contains(), indexOf(), set(), get(), Collections.sort() and clear() function practice added
*sourse: Java Bangla Tutorials 64 - anisul islam

import java.util.ArrayList;
import java.util.Iterator;
import java.util.Collections;

class Test {

    public static void main(String[] args) {

        // arraylist declare
        ArrayList<Integer> number = new ArrayList<>();

        //add value in arraylist
        number.add(10);
        number.add(30);

        //check arraylist empty or not
        boolean check = number.isEmpty();
        System.out.println(check);  //output true

        //contains method to check same value have in arraylist or not
        boolean checkValue = number.contains(30);
        System.out.println(checkValue);  //output false

        //indexof function to show index of a value
        int indexofvalue = number.indexOf(30);
        System.out.println(indexofvalue);  //output 1 but now it show -1  **Note: to show this value off number.clear();

        //set function **actually it is work as replacer. so 1 index replace with 45 value.
        number.set(1, 45);
        System.out.println(number);  //output [10,45]

        //get function using index to get value
        int getvalue = number.get(1);
        System.out.println(getvalue);  //output 45

        //SORT
        Collections.sort(number);
        System.out.println(number);


        //value remove with clear()
        number.clear();
        System.out.println(number);  //output []
        
    }
}

17. Pattern:         
	*
       * *
      * * *
     * * * *
    * * * * *
   * * * * * *
  * * * * * * *
 * * * * * * * *   show this type of pattern.


import java.util.ArrayList;
import java.util.Iterator;
import java.util.Collections;

class Test {

    public static void main(String[] args) {

        for (int i = 1; i < 10; i++) {

             for (int j = 1; j <= 10-i ; j++) {
                System.out.printf(" ");
            }
            for (int j = 1; j < i; j++) {
                System.out.printf("* ");
            }
            System.out.println();
        }
        
    }
}

18. max and second max value

import java.util.*;

class Test {

    public static void main(String[] args) {

        int[] result = new int[5];

        Scanner value = new Scanner(System.in);
        
        for (int i = 0; i < 5; i++) {
            result[i] = value.nextInt();
        }

        int max, second;

        max = second = result[0];

        for (int i = 1; i < 5; i++) {
            if(max < result[i]) {
                second = max;
                max = result[i];
            }
            if (result[i] > second && result[i] != max) {
                second = result[i];
            }
            
        }
        
        System.out.println("Max:"+max);
        System.out.println("Second:"+second);

        
    }
}

19. Sort with bubble sort algorithm

import java.util.*;

class Test {

    public static void main(String[] args) {

        int[] result = {-3, 4, 7, -2, 6};
        int temp;

        for (int i = 0; i < result.length; i++) {
            for (int j = 0; j < result.length-1; j++) {

                if (result[j] > result[j+1]) {
                    temp = result[j];
                    result[j] = result[j+1];
                    result[j+1] = temp;
                }
            }
        }
        
        for (int a : result) {
            System.out.println(a);  //output -3, -2, 4, 6, 7
        }
        
    }
}

20. Fibonaci number using recursive way

import java.util.*;

class Test {

    static void fibonaci(int first1, int second1, int value) {

        int sum = 0;
        if (value != 0) {

            sum = first1 + second1;
            System.out.printf("%d ", sum);
            fibonaci(first1 = second1, second1 = sum, value - 1);
        }
    }

    public static void main(String[] args) {

        System.out.printf("0 1 ");
        fibonaci(0, 1, 5);

    }
}

21. String, StringBuffer and StringBuilder

import java.util.*;

class Test {

    public static void main(String[] args) {

        // String (Strign variable value (example ss or s) is not changeable ).
        String ss = "Bangla";   // this and below both are same
        String s = new String("Bangla");
        // s.append("Desh");  // We cannot change or add character in String
        System.out.println(ss);
        System.out.println(s);

        if(ss == s) {
            System.out.println("Equals");
        } else {
            System.out.println("Not Equals");
        }
        // output : Not Equals
        // coz: here == operator check both are same object or not. we see that first is ss object and last is new s object.
        // So both are not same.

        if(ss.equals(s)) {
            System.out.println("Equals");
        } else {
            System.out.println("Not Equals");
        }
        // output: Equlas.
        // Coz: here ss.equals(s) just check value not object. so both are same here.

        
        //String Buffer
        StringBuffer sb = new StringBuffer("Bangla");
        sb.append("desh");
        System.out.println(sb);  //Output: Bangladesh

        sb.reverse();
        System.out.println(sb);  //Output: hsedalgnaB

        // sb.delete(start, end);
        sb.delete(6, 10);
        System.out.println(sb);  //Output: hsedal

        sb.setLength(3);
        System.out.println(sb);  //Output: hse



        //String Builder (same as string buffer just less secure)
        StringBuilder sbu = new StringBuilder("BanglaDesh");
        sbu.append(" desh");
        System.out.println(sbu);  //Output: Bangladesh desh

        sbu.reverse();
        System.out.println(sbu);  //Output: hsed hsedalgnaB

        // sbu.delete(start, end);
        sbu.delete(6, 10);
        System.out.println(sbu);  //Output: hsed hlgnaB

        sbu.setLength(3);
        System.out.println(sbu);  //Output: hse

    }
}

22. Constructor (2types: parameter and without parameter)
*Source - 83, 84, 85 no video from anisul islam java tutorial

import java.util.*;

class Test {

    int max, min;
    String message;

    // constructor declare1
    Test( int i, int j, String k ) {
        max = i;
        min = j;
        message = k;
    }

    // Constructor declare without parameter
    Test() {
        System.out.println("empty constructor");
    }

    void value() {
        System.out.printf("%d and %d %s\n", max, min, message);
    }

    public static void main(String[] args) {

        Test obj = new Test(10, 5, "both are positive number");
        obj.value();  //Output: 10 and 5 both are positive number

        // if parameter is empty then empty constructor will be call
        Test obj2 = new Test(); // Output: here call empty parameter constructor and print empty constructor 

    }
}

23. Static variable example

import java.util.*;

class Test {

    // if it is without static then when object is create then new memory will be alocated and all 
    // output is 1. But if we use static keyword with below then it will be cammon variable or jsut
    // one time will be memory alocated and output will be 1, 2, 3. 
    static int count;

    Test() {
        count++;
    }

    void testMethod() {
        System.out.println("value of count is: " +count);
    }

    public static void main(String[] args) {

        Test value1 = new Test();
        value1.testMethod();  // output: value of count is: 1

        Test value2 = new Test();
        value2.testMethod();  // output: value of count is: 1

        Test value3 = new Test();
        value3.testMethod();  // output: value of count is: 1

    }
}

24. Static method and variable restirction 

import java.util.*;

class Test {

    //Import note: Always keep it mind that static variable or method only can directly use or call in static place
    // example here x is not static. so if I try to use it in m2() and main() method then it will be error.
    // coz method is static but variable not static.
    // and static method can call in non static method. example m2() is called in m1();
    // static variable can use both static and non static mehtod. example static x = 5; then we can use it m1 and m2 method.

    int x = 5;

    void m1() {
        m2();
        System.out.println(x);
    }

    static void m2() {
        System.out.println("hello");
    }
    public static void main(String[] args) {

        Test obj = new Test();
        obj.m1();  //output: hello 5

    }
}

25. Static block and static variable value set using this
class: 93 (anisul haque -- java bangla)

import java.util.*;

public class Test {

    static int number;
    static String name;

    // Initialize value of static variable in static block 
    static {
        number = 123;
        name = "amin mithun";
    }

    void m1() {
        System.out.println("value :" +number);
        System.out.println("name :" +name);
    }

    public static void main(String[] args) {
        
        Test obj = new Test();
        obj.m1();
    }
}

26. Instance variable hidding 
class: 97 (anisul haque -- java bangla)

import java.util.*;

class Box {

    double height, width, depth, x=0;

    // If here variable is also same as instance variable then it will be call by this itsalf
    // so we need this to solve this. otherwise no need.
    // exmaple double height; then in block it will be this.height = height;    
    Box(double h, double w, double d) {
        height = h;
        width = w;
        depth = d;
       
    }

    void displayVal() {
        x = height * width * depth;
        System.out.println(x);
    }
    public static void main(String[] args) {
        
        Box obj = new Box(10, 20, 30);
        obj.displayVal();

        Box obj2 = new Box(10, 45, 30);
        obj2.displayVal();
    }
}

27. Call by Value
class: 101 (anisul haque -- java bangla)

import java.util.*;

class Test {

    void fn(int data) {
        data = 20;
        System.out.println("data: " +data);
    }

    public static void main(String[] args) {
        
        int x = 10;
        Test obj = new Test();
        obj.fn(x);  // here we pass a value in method but main value (x) is not change. It is called call by value

        System.out.println("x is: " +x);  // Output: x is 10

    }   
}

28. Call by Referance
class: 101 (anisul haque -- java bangla)

import java.util.*;

class Test {

    static int x;

    void fn(Test obj2) {
        obj2.x = 20;
        System.out.println("data: " +x); //output data: 20
    }

    public static void main(String[] args) {
        
        Test obj = new Test();
        obj.x = 10;
        obj.fn(obj);  // here we pass a obj referance value in method and now main value (x) is changed. It is called call by referance

        System.out.println("x is: " +x);  // Output: x is 20

    }   
}

28. Call by Referance
class: 101 (anisul haque -- java bangla)
